"""Tests for the CLI entrypoints and argument handling."""

# pylint: disable=missing-function-docstring
from asyncio import run
from json import dumps
from pathlib import Path

from adparser import cli


def test_cli_smoke_runs_and_writes_outputs(tmp_path: Path, monkeypatch):
    data_dir = tmp_path / "data"
    out_dir = tmp_path / "output"
    data_dir.mkdir()
    out_dir.mkdir()

    blacklist = tmp_path / "blacklist.txt"
    whitelist = tmp_path / "whitelist.txt"
    blacklist.write_text(
        """
# sample
example.com
||ads.example^
(^|\\.)regex.keep$
""".strip(),
        encoding="utf-8",
    )
    whitelist.write_text(
        """
@@||allow.example^
allow-plain.example
""".strip(),
        encoding="utf-8",
    )

    adlists_json = data_dir / "adlists.json"
    whitelists_json = data_dir / "whitelists.json"

    adlists_json.write_text(dumps({"lists": [str(blacklist)]}), encoding="utf-8")
    whitelists_json.write_text(dumps({"lists": [str(whitelist)]}), encoding="utf-8")

    monkeypatch.setattr(cli, "ADLISTS", str(adlists_json), raising=True)
    monkeypatch.setattr(cli, "WHITELISTS", str(whitelists_json), raising=True)
    monkeypatch.setattr(cli, "ADLIST_OUTPUT", str(out_dir / "adlist.txt"), raising=True)
    monkeypatch.setattr(
        cli, "WHITELIST_OUTPUT", str(out_dir / "whitelist.txt"), raising=True
    )

    code = run(cli.main())
    assert code == 0

    ad_out = (out_dir / "adlist.txt").read_text(encoding="utf-8")
    wl_out = (out_dir / "whitelist.txt").read_text(encoding="utf-8")

    assert ad_out.startswith("# Adlist - Generated by Adlist-Parser")
    assert "Total entries:" in ad_out
    assert wl_out.startswith("# Whitelist - Generated by Adlist-Parser")
    assert "Total entries:" in wl_out
    assert "||ads.example^" in ad_out
    assert "||regex.keep^" in ad_out
    assert "example.com" in ad_out
    assert "@@||allow.example^" in wl_out
    assert "allow-plain.example" in wl_out
